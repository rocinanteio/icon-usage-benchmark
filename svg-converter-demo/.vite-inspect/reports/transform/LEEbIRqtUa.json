{
  "resolvedId": "/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/inference/index.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\nvar inferers = require(\"./inferers.js\");\nvar _t = require(\"@babel/types\");\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\nfunction getTypeAnnotation() {\n  let type = this.getData(\"typeAnnotation\");\n  if (type != null) {\n    return type;\n  }\n  type = _getTypeAnnotation.call(this) || anyTypeAnnotation();\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\nconst typeAnnotationInferringNodes = new WeakSet();\nfunction _getTypeAnnotation() {\n  const node = this.node;\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n  typeAnnotationInferringNodes.add(node);\n  try {\n    var _inferer;\n    let inferer = inferers[node.type];\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n    inferer = inferers[this.parentPath.type];\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n  return false;\n}\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  if (genericName === \"Array\") {\n    if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {\n      return true;\n    }\n  }\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  }) || isTSTypeReference(type) && isIdentifier(type.typeName, {\n    name: genericName\n  });\n}\n\n//# sourceMappingURL=index.js.map\n",
      "start": 1727785256936,
      "end": 1727785256958,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite-plugin-commonjs",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "optimus-bundle",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1727785256958,
      "end": 1727785256958,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as inference } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/inference/index.js?commonjs-exports\";\nimport require$$0 from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/inference/inferers.js?commonjs-proxy\";\nimport { __require as require$$1 } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/types/lib/index.js?commonjs-wrapped\";\n\n\"use strict\";\n\nObject.defineProperty(inference, \"__esModule\", {\n  value: true\n});\nvar _getTypeAnnotation_1 = inference._getTypeAnnotation = _getTypeAnnotation;\nvar baseTypeStrictlyMatches_1 = inference.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nvar couldBeBaseType_1 = inference.couldBeBaseType = couldBeBaseType;\nvar getTypeAnnotation_1 = inference.getTypeAnnotation = getTypeAnnotation;\nvar isBaseType_1 = inference.isBaseType = isBaseType;\nvar isGenericType_1 = inference.isGenericType = isGenericType;\nvar inferers = require$$0;\nvar _t = require$$1();\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isArrayTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTSArrayType,\n  isTSTypeAnnotation,\n  isTSTypeReference,\n  isTupleTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\nfunction getTypeAnnotation() {\n  let type = this.getData(\"typeAnnotation\");\n  if (type != null) {\n    return type;\n  }\n  type = _getTypeAnnotation.call(this) || anyTypeAnnotation();\n  if (isTypeAnnotation(type) || isTSTypeAnnotation(type)) {\n    type = type.typeAnnotation;\n  }\n  this.setData(\"typeAnnotation\", type);\n  return type;\n}\nconst typeAnnotationInferringNodes = new WeakSet();\nfunction _getTypeAnnotation() {\n  const node = this.node;\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n  typeAnnotationInferringNodes.add(node);\n  try {\n    var _inferer;\n    let inferer = inferers[node.type];\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n    inferer = inferers[this.parentPath.type];\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n  return false;\n}\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  if (genericName === \"Array\") {\n    if (isTSArrayType(type) || isArrayTypeAnnotation(type) || isTupleTypeAnnotation(type)) {\n      return true;\n    }\n  }\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  }) || isTSTypeReference(type) && isIdentifier(type.typeName, {\n    name: genericName\n  });\n}\n\n//# sourceMappingURL=index.js.map\n\nexport { inference as __moduleExports, _getTypeAnnotation_1 as _getTypeAnnotation, baseTypeStrictlyMatches_1 as baseTypeStrictlyMatches, couldBeBaseType_1 as couldBeBaseType, getTypeAnnotation_1 as getTypeAnnotation, isBaseType_1 as isBaseType, isGenericType_1 as isGenericType, inference as default };",
      "start": 1727785256958,
      "end": 1727785257148,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": ";;;;;AAAA,YAAY,CAAC;AACb;AACA,MAAM,CAAC,cAAc,CAAC,SAAO,EAAE,YAAY,EAAE;AAC7C,EAAE,KAAK,EAAE,IAAI;AACb,CAAC,CAAC,CAAC;AACH,uDAA0B,GAAG,kBAAkB,CAAC;AAChD,iEAA+B,GAAG,uBAAuB,CAAC;AAC1D,iDAAuB,GAAG,eAAe,CAAC;AAC1C,qDAAyB,GAAG,iBAAiB,CAAC;AAC9C,uCAAkB,GAAG,UAAU,CAAC;AAChC,6CAAqB,GAAG,aAAa,CAAC;AACtC,IAAI,QAAQ,GAAG,UAAwB,CAAC;AACxC,IAAI,EAAE,GAAG,YAAuB,CAAC;AACjC,MAAM;AACN,EAAE,iBAAiB;AACnB,EAAE,mBAAmB;AACrB,EAAE,qBAAqB;AACvB,EAAE,uBAAuB;AACzB,EAAE,qBAAqB;AACvB,EAAE,oBAAoB;AACtB,EAAE,uBAAuB;AACzB,EAAE,YAAY;AACd,EAAE,qBAAqB;AACvB,EAAE,sBAAsB;AACxB,EAAE,sBAAsB;AACxB,EAAE,aAAa;AACf,EAAE,kBAAkB;AACpB,EAAE,iBAAiB;AACnB,EAAE,qBAAqB;AACvB,EAAE,gBAAgB;AAClB,EAAE,qBAAqB;AACvB,EAAE,oBAAoB;AACtB,EAAE,oBAAoB;AACtB,EAAE,kBAAkB;AACpB,CAAC,GAAG,EAAE,CAAC;AACP,SAAS,iBAAiB,GAAG;AAC7B,EAAE,IAAI,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC;AAC5C,EAAE,IAAI,IAAI,IAAI,IAAI,EAAE;AACpB,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG;AACH,EAAE,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAiB,EAAE,CAAC;AAC9D,EAAE,IAAI,gBAAgB,CAAC,IAAI,CAAC,IAAI,kBAAkB,CAAC,IAAI,CAAC,EAAE;AAC1D,IAAI,IAAI,GAAG,IAAI,CAAC,cAAc,CAAC;AAC/B,GAAG;AACH,EAAE,IAAI,CAAC,OAAO,CAAC,gBAAgB,EAAE,IAAI,CAAC,CAAC;AACvC,EAAE,OAAO,IAAI,CAAC;AACd,CAAC;AACD,MAAM,4BAA4B,GAAG,IAAI,OAAO,EAAE,CAAC;AACnD,SAAS,kBAAkB,GAAG;AAC9B,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC;AACzB,EAAE,IAAI,CAAC,IAAI,EAAE;AACb,IAAI,IAAI,IAAI,CAAC,GAAG,KAAK,MAAM,IAAI,IAAI,CAAC,UAAU,CAAC,oBAAoB,EAAE,EAAE;AACvE,MAAM,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC;AAChD,MAAM,MAAM,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC;AAC7C,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,MAAM,IAAI,YAAY,CAAC,gBAAgB,EAAE,EAAE;AACpE,QAAQ,OAAO,oBAAoB,EAAE,CAAC;AACtC,OAAO;AACP,MAAM,IAAI,MAAM,CAAC,GAAG,KAAK,MAAM,IAAI,YAAY,CAAC,gBAAgB,EAAE,EAAE;AACpE,QAAQ,OAAO,iBAAiB,EAAE,CAAC;AACnC,OAAO;AACP,MAAM,OAAO,kBAAkB,EAAE,CAAC;AAClC,KAAK,MAAM;AACX,MAAM,OAAO;AACb,KAAK;AACL,GAAG;AACH,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE;AAC3B,IAAI,OAAO,IAAI,CAAC,cAAc,CAAC;AAC/B,GAAG;AACH,EAAE,IAAI,4BAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;AAC9C,IAAI,OAAO;AACX,GAAG;AACH,EAAE,4BAA4B,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;AACzC,EAAE,IAAI;AACN,IAAI,IAAI,QAAQ,CAAC;AACjB,IAAI,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACtC,IAAI,IAAI,OAAO,EAAE;AACjB,MAAM,OAAO,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AACtC,KAAK;AACL,IAAI,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAC7C,IAAI,IAAI,CAAC,QAAQ,GAAG,OAAO,KAAK,IAAI,IAAI,QAAQ,CAAC,WAAW,EAAE;AAC9D,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC,iBAAiB,EAAE,CAAC;AACjD,KAAK;AACL,GAAG,SAAS;AACZ,IAAI,4BAA4B,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC9C,GAAG;AACH,CAAC;AACD,SAAS,UAAU,CAAC,QAAQ,EAAE,IAAI,EAAE;AACpC,EAAE,OAAO,WAAW,CAAC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,EAAE,EAAE,IAAI,CAAC,CAAC;AAC/D,CAAC;AACD,SAAS,WAAW,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE;AAC3C,EAAE,IAAI,QAAQ,KAAK,QAAQ,EAAE;AAC7B,IAAI,OAAO,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACxC,GAAG,MAAM,IAAI,QAAQ,KAAK,QAAQ,EAAE;AACpC,IAAI,OAAO,sBAAsB,CAAC,IAAI,CAAC,CAAC;AACxC,GAAG,MAAM,IAAI,QAAQ,KAAK,SAAS,EAAE;AACrC,IAAI,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAC;AACzC,GAAG,MAAM,IAAI,QAAQ,KAAK,KAAK,EAAE;AACjC,IAAI,OAAO,mBAAmB,CAAC,IAAI,CAAC,CAAC;AACrC,GAAG,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE;AACnC,IAAI,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACvC,GAAG,MAAM,IAAI,QAAQ,KAAK,OAAO,EAAE;AACnC,IAAI,OAAO,qBAAqB,CAAC,IAAI,CAAC,CAAC;AACvC,GAAG,MAAM,IAAI,QAAQ,KAAK,MAAM,EAAE;AAClC,IAAI,OAAO,oBAAoB,CAAC,IAAI,CAAC,CAAC;AACtC,GAAG,MAAM;AACT,IAAI,IAAI,IAAI,EAAE;AACd,MAAM,OAAO,KAAK,CAAC;AACnB,KAAK,MAAM;AACX,MAAM,MAAM,IAAI,KAAK,CAAC,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvD,KAAK;AACL,GAAG;AACH,CAAC;AACD,SAAS,eAAe,CAAC,IAAI,EAAE;AAC/B,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACxC,EAAE,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE,OAAO,IAAI,CAAC;AAC7C,EAAE,IAAI,qBAAqB,CAAC,IAAI,CAAC,EAAE;AACnC,IAAI,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;AACpC,MAAM,IAAI,mBAAmB,CAAC,KAAK,CAAC,IAAI,WAAW,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,EAAE;AACxE,QAAQ,OAAO,IAAI,CAAC;AACpB,OAAO;AACP,KAAK;AACL,IAAI,OAAO,KAAK,CAAC;AACjB,GAAG,MAAM;AACT,IAAI,OAAO,WAAW,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AACzC,GAAG;AACH,CAAC;AACD,SAAS,uBAAuB,CAAC,QAAQ,EAAE;AAC3C,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACxC,EAAE,MAAM,KAAK,GAAG,QAAQ,CAAC,iBAAiB,EAAE,CAAC;AAC7C,EAAE,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,oBAAoB,CAAC,IAAI,CAAC,EAAE;AAChE,IAAI,OAAO,KAAK,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;AACpC,GAAG;AACH,EAAE,OAAO,KAAK,CAAC;AACf,CAAC;AACD,SAAS,aAAa,CAAC,WAAW,EAAE;AACpC,EAAE,MAAM,IAAI,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;AACxC,EAAE,IAAI,WAAW,KAAK,OAAO,EAAE;AAC/B,IAAI,IAAI,aAAa,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,IAAI,qBAAqB,CAAC,IAAI,CAAC,EAAE;AAC3F,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL,GAAG;AACH,EAAE,OAAO,uBAAuB,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE;AAChE,IAAI,IAAI,EAAE,WAAW;AACrB,GAAG,CAAC,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC,QAAQ,EAAE;AAC/D,IAAI,IAAI,EAAE,WAAW;AACrB,GAAG,CAAC,CAAC;AACL,CAAC;AACD;AACA"
      }
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1727785257148,
      "end": 1727785257148,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1727785257148,
      "end": 1727785257148,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1727785257148,
      "end": 1727785257148,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1727785257148,
      "end": 1727785257148,
      "order": "normal"
    }
  ]
}
