{
  "resolvedId": "/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/modification.js",
  "transforms": [
    {
      "name": "vite:load-fallback",
      "result": "\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._containerInsert = _containerInsert;\nexports._containerInsertAfter = _containerInsertAfter;\nexports._containerInsertBefore = _containerInsertBefore;\nexports._verifyNodeList = _verifyNodeList;\nexports.insertAfter = insertAfter;\nexports.insertBefore = insertBefore;\nexports.pushContainer = pushContainer;\nexports.unshiftContainer = unshiftContainer;\nexports.updateSiblingKeys = updateSiblingKeys;\nvar _cache = require(\"../cache.js\");\nvar _hoister = require(\"./lib/hoister.js\");\nvar _index = require(\"./index.js\");\nvar _context = require(\"./context.js\");\nvar _removal = require(\"./removal.js\");\nvar _t = require(\"@babel/types\");\nconst {\n  arrowFunctionExpression,\n  assertExpression,\n  assignmentExpression,\n  blockStatement,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  isAssignmentExpression,\n  isCallExpression,\n  isExportNamedDeclaration,\n  isExpression,\n  isIdentifier,\n  isSequenceExpression,\n  isSuper,\n  thisExpression\n} = _t;\nfunction insertBefore(nodes_) {\n  _removal._assertUnremoved.call(this);\n  const nodes = _verifyNodeList.call(this, nodes_);\n  const {\n    parentPath,\n    parent\n  } = this;\n  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n    return parentPath.insertBefore(nodes);\n  } else if (this.isNodeType(\"Expression\") && !this.isJSXElement() || parentPath.isForStatement() && this.key === \"init\") {\n    if (this.node) nodes.push(this.node);\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return _containerInsertBefore.call(this, nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node;\n    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return this.unshiftContainer(\"body\", nodes);\n  } else {\n    throw new Error(\"We don't know what to do with this node type. \" + \"We were previously a Statement but we can't fit in here?\");\n  }\n}\nfunction _containerInsert(from, nodes) {\n  updateSiblingKeys.call(this, from, nodes.length);\n  const paths = [];\n  this.container.splice(from, 0, ...nodes);\n  for (let i = 0; i < nodes.length; i++) {\n    var _this$context;\n    const to = from + i;\n    const path = this.getSibling(to);\n    paths.push(path);\n    if ((_this$context = this.context) != null && _this$context.queue) {\n      _context.pushContext.call(path, this.context);\n    }\n  }\n  const contexts = _context._getQueueContexts.call(this);\n  for (const path of paths) {\n    _context.setScope.call(path);\n    path.debug(\"Inserted.\");\n    for (const context of contexts) {\n      context.maybeQueue(path, true);\n    }\n  }\n  return paths;\n}\nfunction _containerInsertBefore(nodes) {\n  return _containerInsert.call(this, this.key, nodes);\n}\nfunction _containerInsertAfter(nodes) {\n  return _containerInsert.call(this, this.key + 1, nodes);\n}\nconst last = arr => arr[arr.length - 1];\nfunction isHiddenInSequenceExpression(path) {\n  return isSequenceExpression(path.parent) && (last(path.parent.expressions) !== path.node || isHiddenInSequenceExpression(path.parentPath));\n}\nfunction isAlmostConstantAssignment(node, scope) {\n  if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {\n    return false;\n  }\n  const blockScope = scope.getBlockParent();\n  return blockScope.hasOwnBinding(node.left.name) && blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1;\n}\nfunction insertAfter(nodes_) {\n  _removal._assertUnremoved.call(this);\n  if (this.isSequenceExpression()) {\n    return last(this.get(\"expressions\")).insertAfter(nodes_);\n  }\n  const nodes = _verifyNodeList.call(this, nodes_);\n  const {\n    parentPath,\n    parent\n  } = this;\n  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n    return parentPath.insertAfter(nodes.map(node => {\n      return isExpression(node) ? expressionStatement(node) : node;\n    }));\n  } else if (this.isNodeType(\"Expression\") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === \"init\") {\n    const self = this;\n    if (self.node) {\n      const node = self.node;\n      let {\n        scope\n      } = this;\n      if (scope.path.isPattern()) {\n        assertExpression(node);\n        self.replaceWith(callExpression(arrowFunctionExpression([], node), []));\n        self.get(\"callee.body\").insertAfter(nodes);\n        return [self];\n      }\n      if (isHiddenInSequenceExpression(self)) {\n        nodes.unshift(node);\n      } else if (isCallExpression(node) && isSuper(node.callee)) {\n        nodes.unshift(node);\n        nodes.push(thisExpression());\n      } else if (isAlmostConstantAssignment(node, scope)) {\n        nodes.unshift(node);\n        nodes.push(cloneNode(node.left));\n      } else if (scope.isPure(node, true)) {\n        nodes.push(node);\n      } else {\n        if (parentPath.isMethod({\n          computed: true,\n          key: node\n        })) {\n          scope = scope.parent;\n        }\n        const temp = scope.generateDeclaredUidIdentifier();\n        nodes.unshift(expressionStatement(assignmentExpression(\"=\", cloneNode(temp), node)));\n        nodes.push(expressionStatement(cloneNode(temp)));\n      }\n    }\n    return this.replaceExpressionWithStatements(nodes);\n  } else if (Array.isArray(this.container)) {\n    return _containerInsertAfter.call(this, nodes);\n  } else if (this.isStatementOrBlock()) {\n    const node = this.node;\n    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);\n    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n    return this.pushContainer(\"body\", nodes);\n  } else {\n    throw new Error(\"We don't know what to do with this node type. \" + \"We were previously a Statement but we can't fit in here?\");\n  }\n}\nfunction updateSiblingKeys(fromIndex, incrementBy) {\n  if (!this.parent) return;\n  const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];\n  for (const [, path] of paths) {\n    if (typeof path.key === \"number\" && path.key >= fromIndex) {\n      path.key += incrementBy;\n    }\n  }\n}\nfunction _verifyNodeList(nodes) {\n  if (!nodes) {\n    return [];\n  }\n  if (!Array.isArray(nodes)) {\n    nodes = [nodes];\n  }\n  for (let i = 0; i < nodes.length; i++) {\n    const node = nodes[i];\n    let msg;\n    if (!node) {\n      msg = \"has falsy node\";\n    } else if (typeof node !== \"object\") {\n      msg = \"contains a non-object node\";\n    } else if (!node.type) {\n      msg = \"without a type\";\n    } else if (node instanceof _index.default) {\n      msg = \"has a NodePath when it expected a raw object\";\n    }\n    if (msg) {\n      const type = Array.isArray(node) ? \"array\" : typeof node;\n      throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);\n    }\n  }\n  return nodes;\n}\nfunction unshiftContainer(listKey, nodes) {\n  _removal._assertUnremoved.call(this);\n  nodes = _verifyNodeList.call(this, nodes);\n  const path = _index.default.get({\n    parentPath: this,\n    parent: this.node,\n    container: this.node[listKey],\n    listKey,\n    key: 0\n  }).setContext(this.context);\n  return _containerInsertBefore.call(path, nodes);\n}\nfunction pushContainer(listKey, nodes) {\n  _removal._assertUnremoved.call(this);\n  const verifiedNodes = _verifyNodeList.call(this, nodes);\n  const container = this.node[listKey];\n  const path = _index.default.get({\n    parentPath: this,\n    parent: this.node,\n    container: container,\n    listKey,\n    key: container.length\n  }).setContext(this.context);\n  return path.replaceWithMultiple(verifiedNodes);\n}\n{\n  exports.hoist = function hoist(scope = this.scope) {\n    const hoister = new _hoister.default(this, scope);\n    return hoister.run();\n  };\n}\n\n//# sourceMappingURL=modification.js.map\n",
      "start": 1728160681052,
      "end": 1728160681173,
      "sourcemaps": null
    },
    {
      "name": "vite:react-babel",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "pre"
    },
    {
      "name": "optimus-bundle",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "pre"
    },
    {
      "name": "vite:css",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:esbuild",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:json",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:worker",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite-plugin-commonjs",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:define",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:css-post",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:build-html",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:worker-import-meta-url",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "vite:asset-import-meta-url",
      "start": 1728160681173,
      "end": 1728160681173,
      "order": "normal"
    },
    {
      "name": "commonjs",
      "result": "import * as commonjsHelpers from \"\u0000commonjsHelpers.js\";\nimport { __exports as modification } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/modification.js?commonjs-exports\";\nimport require$$0 from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/cache.js?commonjs-proxy\";\nimport require$$1 from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/lib/hoister.js?commonjs-proxy\";\nimport { __require as require$$2 } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/index.js?commonjs-wrapped\";\nimport { __require as require$$3 } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/context.js?commonjs-wrapped\";\nimport { __require as require$$4 } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/traverse/lib/path/removal.js?commonjs-wrapped\";\nimport { __require as require$$5 } from \"\\u0000/Users/ibrahim.dagdelen/Projects/Github/icon-converter-demo/node_modules/@babel/types/lib/index.js?commonjs-wrapped\";\n\nvar hasRequiredModification;\n\nfunction requireModification () {\n\tif (hasRequiredModification) return modification;\n\thasRequiredModification = 1;\n\t\"use strict\";\n\n\tObject.defineProperty(modification, \"__esModule\", {\n\t  value: true\n\t});\n\tmodification._containerInsert = _containerInsert;\n\tmodification._containerInsertAfter = _containerInsertAfter;\n\tmodification._containerInsertBefore = _containerInsertBefore;\n\tmodification._verifyNodeList = _verifyNodeList;\n\tmodification.insertAfter = insertAfter;\n\tmodification.insertBefore = insertBefore;\n\tmodification.pushContainer = pushContainer;\n\tmodification.unshiftContainer = unshiftContainer;\n\tmodification.updateSiblingKeys = updateSiblingKeys;\n\tvar _cache = require$$0;\n\tvar _hoister = require$$1;\n\tvar _index = require$$2();\n\tvar _context = require$$3();\n\tvar _removal = require$$4();\n\tvar _t = require$$5();\n\tconst {\n\t  arrowFunctionExpression,\n\t  assertExpression,\n\t  assignmentExpression,\n\t  blockStatement,\n\t  callExpression,\n\t  cloneNode,\n\t  expressionStatement,\n\t  isAssignmentExpression,\n\t  isCallExpression,\n\t  isExportNamedDeclaration,\n\t  isExpression,\n\t  isIdentifier,\n\t  isSequenceExpression,\n\t  isSuper,\n\t  thisExpression\n\t} = _t;\n\tfunction insertBefore(nodes_) {\n\t  _removal._assertUnremoved.call(this);\n\t  const nodes = _verifyNodeList.call(this, nodes_);\n\t  const {\n\t    parentPath,\n\t    parent\n\t  } = this;\n\t  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n\t    return parentPath.insertBefore(nodes);\n\t  } else if (this.isNodeType(\"Expression\") && !this.isJSXElement() || parentPath.isForStatement() && this.key === \"init\") {\n\t    if (this.node) nodes.push(this.node);\n\t    return this.replaceExpressionWithStatements(nodes);\n\t  } else if (Array.isArray(this.container)) {\n\t    return _containerInsertBefore.call(this, nodes);\n\t  } else if (this.isStatementOrBlock()) {\n\t    const node = this.node;\n\t    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);\n\t    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n\t    return this.unshiftContainer(\"body\", nodes);\n\t  } else {\n\t    throw new Error(\"We don't know what to do with this node type. \" + \"We were previously a Statement but we can't fit in here?\");\n\t  }\n\t}\n\tfunction _containerInsert(from, nodes) {\n\t  updateSiblingKeys.call(this, from, nodes.length);\n\t  const paths = [];\n\t  this.container.splice(from, 0, ...nodes);\n\t  for (let i = 0; i < nodes.length; i++) {\n\t    var _this$context;\n\t    const to = from + i;\n\t    const path = this.getSibling(to);\n\t    paths.push(path);\n\t    if ((_this$context = this.context) != null && _this$context.queue) {\n\t      _context.pushContext.call(path, this.context);\n\t    }\n\t  }\n\t  const contexts = _context._getQueueContexts.call(this);\n\t  for (const path of paths) {\n\t    _context.setScope.call(path);\n\t    path.debug(\"Inserted.\");\n\t    for (const context of contexts) {\n\t      context.maybeQueue(path, true);\n\t    }\n\t  }\n\t  return paths;\n\t}\n\tfunction _containerInsertBefore(nodes) {\n\t  return _containerInsert.call(this, this.key, nodes);\n\t}\n\tfunction _containerInsertAfter(nodes) {\n\t  return _containerInsert.call(this, this.key + 1, nodes);\n\t}\n\tconst last = arr => arr[arr.length - 1];\n\tfunction isHiddenInSequenceExpression(path) {\n\t  return isSequenceExpression(path.parent) && (last(path.parent.expressions) !== path.node || isHiddenInSequenceExpression(path.parentPath));\n\t}\n\tfunction isAlmostConstantAssignment(node, scope) {\n\t  if (!isAssignmentExpression(node) || !isIdentifier(node.left)) {\n\t    return false;\n\t  }\n\t  const blockScope = scope.getBlockParent();\n\t  return blockScope.hasOwnBinding(node.left.name) && blockScope.getOwnBinding(node.left.name).constantViolations.length <= 1;\n\t}\n\tfunction insertAfter(nodes_) {\n\t  _removal._assertUnremoved.call(this);\n\t  if (this.isSequenceExpression()) {\n\t    return last(this.get(\"expressions\")).insertAfter(nodes_);\n\t  }\n\t  const nodes = _verifyNodeList.call(this, nodes_);\n\t  const {\n\t    parentPath,\n\t    parent\n\t  } = this;\n\t  if (parentPath.isExpressionStatement() || parentPath.isLabeledStatement() || isExportNamedDeclaration(parent) || parentPath.isExportDefaultDeclaration() && this.isDeclaration()) {\n\t    return parentPath.insertAfter(nodes.map(node => {\n\t      return isExpression(node) ? expressionStatement(node) : node;\n\t    }));\n\t  } else if (this.isNodeType(\"Expression\") && !this.isJSXElement() && !parentPath.isJSXElement() || parentPath.isForStatement() && this.key === \"init\") {\n\t    const self = this;\n\t    if (self.node) {\n\t      const node = self.node;\n\t      let {\n\t        scope\n\t      } = this;\n\t      if (scope.path.isPattern()) {\n\t        assertExpression(node);\n\t        self.replaceWith(callExpression(arrowFunctionExpression([], node), []));\n\t        self.get(\"callee.body\").insertAfter(nodes);\n\t        return [self];\n\t      }\n\t      if (isHiddenInSequenceExpression(self)) {\n\t        nodes.unshift(node);\n\t      } else if (isCallExpression(node) && isSuper(node.callee)) {\n\t        nodes.unshift(node);\n\t        nodes.push(thisExpression());\n\t      } else if (isAlmostConstantAssignment(node, scope)) {\n\t        nodes.unshift(node);\n\t        nodes.push(cloneNode(node.left));\n\t      } else if (scope.isPure(node, true)) {\n\t        nodes.push(node);\n\t      } else {\n\t        if (parentPath.isMethod({\n\t          computed: true,\n\t          key: node\n\t        })) {\n\t          scope = scope.parent;\n\t        }\n\t        const temp = scope.generateDeclaredUidIdentifier();\n\t        nodes.unshift(expressionStatement(assignmentExpression(\"=\", cloneNode(temp), node)));\n\t        nodes.push(expressionStatement(cloneNode(temp)));\n\t      }\n\t    }\n\t    return this.replaceExpressionWithStatements(nodes);\n\t  } else if (Array.isArray(this.container)) {\n\t    return _containerInsertAfter.call(this, nodes);\n\t  } else if (this.isStatementOrBlock()) {\n\t    const node = this.node;\n\t    const shouldInsertCurrentNode = node && (!this.isExpressionStatement() || node.expression != null);\n\t    this.replaceWith(blockStatement(shouldInsertCurrentNode ? [node] : []));\n\t    return this.pushContainer(\"body\", nodes);\n\t  } else {\n\t    throw new Error(\"We don't know what to do with this node type. \" + \"We were previously a Statement but we can't fit in here?\");\n\t  }\n\t}\n\tfunction updateSiblingKeys(fromIndex, incrementBy) {\n\t  if (!this.parent) return;\n\t  const paths = (0, _cache.getCachedPaths)(this.hub, this.parent) || [];\n\t  for (const [, path] of paths) {\n\t    if (typeof path.key === \"number\" && path.key >= fromIndex) {\n\t      path.key += incrementBy;\n\t    }\n\t  }\n\t}\n\tfunction _verifyNodeList(nodes) {\n\t  if (!nodes) {\n\t    return [];\n\t  }\n\t  if (!Array.isArray(nodes)) {\n\t    nodes = [nodes];\n\t  }\n\t  for (let i = 0; i < nodes.length; i++) {\n\t    const node = nodes[i];\n\t    let msg;\n\t    if (!node) {\n\t      msg = \"has falsy node\";\n\t    } else if (typeof node !== \"object\") {\n\t      msg = \"contains a non-object node\";\n\t    } else if (!node.type) {\n\t      msg = \"without a type\";\n\t    } else if (node instanceof _index.default) {\n\t      msg = \"has a NodePath when it expected a raw object\";\n\t    }\n\t    if (msg) {\n\t      const type = Array.isArray(node) ? \"array\" : typeof node;\n\t      throw new Error(`Node list ${msg} with the index of ${i} and type of ${type}`);\n\t    }\n\t  }\n\t  return nodes;\n\t}\n\tfunction unshiftContainer(listKey, nodes) {\n\t  _removal._assertUnremoved.call(this);\n\t  nodes = _verifyNodeList.call(this, nodes);\n\t  const path = _index.default.get({\n\t    parentPath: this,\n\t    parent: this.node,\n\t    container: this.node[listKey],\n\t    listKey,\n\t    key: 0\n\t  }).setContext(this.context);\n\t  return _containerInsertBefore.call(path, nodes);\n\t}\n\tfunction pushContainer(listKey, nodes) {\n\t  _removal._assertUnremoved.call(this);\n\t  const verifiedNodes = _verifyNodeList.call(this, nodes);\n\t  const container = this.node[listKey];\n\t  const path = _index.default.get({\n\t    parentPath: this,\n\t    parent: this.node,\n\t    container: container,\n\t    listKey,\n\t    key: container.length\n\t  }).setContext(this.context);\n\t  return path.replaceWithMultiple(verifiedNodes);\n\t}\n\t{\n\t  modification.hoist = function hoist(scope = this.scope) {\n\t    const hoister = new _hoister.default(this, scope);\n\t    return hoister.run();\n\t  };\n\t}\n\n\t//# sourceMappingURL=modification.js.map\n\treturn modification;\n}\n\nexport { requireModification as __require };",
      "start": 1728160681173,
      "end": 1728160681445,
      "order": "normal",
      "sourcemaps": {
        "version": 3,
        "sources": [
          ""
        ],
        "names": [],
        "mappings": "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"
      }
    },
    {
      "name": "inject",
      "start": 1728160681445,
      "end": 1728160681445,
      "order": "normal"
    },
    {
      "name": "vite:dynamic-import-vars",
      "start": 1728160681445,
      "end": 1728160681445,
      "order": "normal"
    },
    {
      "name": "vite:import-glob",
      "start": 1728160681445,
      "end": 1728160681445,
      "order": "normal"
    },
    {
      "name": "vite:build-import-analysis",
      "start": 1728160681445,
      "end": 1728160681445,
      "order": "normal"
    },
    {
      "name": "vite:reporter",
      "start": 1728160681445,
      "end": 1728160681445,
      "order": "normal"
    }
  ]
}
